{"ast":null,"code":"export function getMergeSortAnimation(array) {\n  let animation = [];\n  let auxillaryarray = array.slice();\n  MergeSort(auxillaryarray, 0, auxillaryarray.length - 1, animation);\n  array = auxillaryarray;\n  return [animation, array];\n}\n\nfunction MergeSort(auxillaryarray, l, r, animation) {\n  if (l < r) {\n    let m = l + (r - l) / 2;\n    MergeSort(auxillaryarray, l, m, animation);\n    MergeSort(auxillaryarray, m + 1, r, animation);\n    Merge(auxillaryarray, l, m, r, animation);\n  }\n}\n\nfunction Merge(auxillaryarray, l, m, r, animation) {\n  let n1 = m - l + 1;\n  let n2 = r - m;\n  let L = [];\n  let R = [];\n\n  for (let i = 0; i < n1; i++) {\n    L[i] = auxillaryarray[l + i];\n  }\n\n  for (let j = 0; j < n2; j++) {\n    R[j] = auxillaryarray[m + 1 + j];\n  }\n\n  let i = 0;\n  let j = 0;\n  let k = l;\n\n  while (i < n1 && j < n2) {\n    animation.push([\"comparison1\", i, m + 1 + j]);\n    animation.push([\"comparison2\", i, m + 1 + j]);\n\n    if (L[i] <= R[j]) {\n      auxillaryarray[k] = L[i];\n      animation.push([\"swap\", k, L[i]]);\n      i++;\n    } else {\n      auxillaryarray[k] = R[j];\n      animation.push([\"swap\", k, R[j]]);\n      j++;\n    }\n\n    k++;\n  }\n\n  while (i < n1) {\n    auxillaryarray[k] = L[i];\n    animation.push([\"swap\", k, L[i]]);\n    i++;\n    k++;\n  }\n\n  while (j < n1) {\n    auxillaryarray[k] = R[j];\n    animation.push([\"swap\", k, R[j]]);\n    j++;\n    k++;\n  }\n}","map":{"version":3,"sources":["/home/prajjawal-banati/COLLEGE/SEM VII/interactive-algorithm-visualizer/src/sortingAlgorithms/MergeSort.js"],"names":["getMergeSortAnimation","array","animation","auxillaryarray","slice","MergeSort","length","l","r","m","Merge","n1","n2","L","R","i","j","k","push"],"mappings":"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","sourcesContent":["export function getMergeSortAnimation(array)\n{\n    let animation=[];\n    let auxillaryarray=array.slice();\n    MergeSort(auxillaryarray,0,auxillaryarray.length-1,animation);\n    array=auxillaryarray;\n    return [animation,array];\n}\nfunction MergeSort(auxillaryarray,l,r,animation)\n{\n    if(l<r)\n    {\n        let m=l + (r - l) / 2; \n        MergeSort(auxillaryarray,l,m,animation);\n        MergeSort(auxillaryarray,m+1,r, animation);\n        Merge(auxillaryarray,l,m,r, animation)\n    }\n}\nfunction Merge(auxillaryarray,l,m,r,animation)\n{\n    let n1=m-l+1;\n    let n2=r-m;\n    let L=[];\n    let R=[];\n    for(let i=0;i<n1;i++)\n    {\n        L[i]=auxillaryarray[l+i];\n    }\n    for(let j=0;j<n2;j++)\n    {\n        R[j]=auxillaryarray[m+1+j];\n    }\n    let i=0;\n    let j=0;\n    let k=l;\n    while(i<n1 && j < n2)\n    {\n        animation.push([\"comparison1\",i,m+1+j])\n        animation.push([\"comparison2\",i,m+1+j])\n        if(L[i] <= R[j])\n        {\n            auxillaryarray[k]=L[i]\n            animation.push([\"swap\",k,L[i]]);\n            i++;\n        }\n        else \n        {\n            auxillaryarray[k]=R[j];\n            animation.push([\"swap\",k,R[j]]);\n            j++;\n        }\n        k++;\n    }\n    while(i<n1)\n    {\n        auxillaryarray[k]=L[i];\n        animation.push([\"swap\",k,L[i]]);\n        i++;\n        k++;\n    }\n    while(j<n1)\n    {\n        auxillaryarray[k]=R[j];\n        animation.push([\"swap\",k,R[j]]);\n        j++;\n        k++;\n    }\n}"]},"metadata":{},"sourceType":"module"}