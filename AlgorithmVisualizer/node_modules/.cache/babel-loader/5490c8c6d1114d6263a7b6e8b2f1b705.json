{"ast":null,"code":"export function getMergeSortAnimation(array) {\n  let animation = [];\n  let auxillaryarray = array.slice();\n  mergeSort(auxillaryarray, 0, auxillaryarray.length - 1, animation);\n  return [animation, array];\n}\n\nfunction mergeSort(unsortedArray, forwardindex, endingindex, animation) {\n  if (forwardindex == endingindex) {\n    return;\n  }\n\n  let middleindex = Math.floor((forwardindex + endingindex) / 2);\n  mergeSort(unsortedArray, forwardindex, middleindex, animation);\n  mergeSort(unsortedArray, middleindex + 1, endingindex, animation);\n  merge(unsortedArray, forwardindex, middleindex, endingindex, animation);\n}\n\nfunction merge(unsortedArray, startindex, middleindex, endingindex, animation) {\n  let SortedArray = [];\n  let i = startindex;\n  let j = middleindex + 1;\n\n  while (i <= middleindex && j <= endingindex) {\n    animation.push([\"comparison1\", i, j]);\n    animation.push([\"comparison2\", i, j]);\n\n    if (unsortedArray[i] <= unsortedArray[j]) {\n      SortedArray.push(unsortedArray[i++]);\n    } else {\n      SortedArray.push(unsortedArray[j++]);\n    }\n  }\n\n  while (i <= middleindex) {\n    SortedArray.push(unsortedArray[i++]);\n  }\n\n  while (j <= endingindex) {\n    SortedArray.push(unsortedArray[j++]);\n  }\n}","map":{"version":3,"sources":["/home/prajjawal-banati/COLLEGE/SEM VII/interactive-algorithm-visualizer/src/sortingAlgorithms/MergeSort.js"],"names":["getMergeSortAnimation","array","animation","auxillaryarray","slice","mergeSort","length","unsortedArray","forwardindex","endingindex","middleindex","Math","floor","merge","startindex","SortedArray","i","j","push"],"mappings":"AAAA,OAAO,SAASA,qBAAT,CAA+BC,KAA/B,EACP;AACE,MAAIC,SAAS,GAAC,EAAd;AACA,MAAIC,cAAc,GAACF,KAAK,CAACG,KAAN,EAAnB;AACAC,EAAAA,SAAS,CAACF,cAAD,EAAgB,CAAhB,EAAkBA,cAAc,CAACG,MAAf,GAAsB,CAAxC,EAA0CJ,SAA1C,CAAT;AACA,SAAO,CAACA,SAAD,EAAWD,KAAX,CAAP;AACD;;AACD,SAASI,SAAT,CAAoBE,aAApB,EAAkCC,YAAlC,EAA+CC,WAA/C,EAA2DP,SAA3D,EAAsE;AACpE,MAAGM,YAAY,IAAEC,WAAjB,EACA;AACE;AACD;;AACD,MAAIC,WAAW,GAACC,IAAI,CAACC,KAAL,CAAW,CAACJ,YAAY,GAACC,WAAd,IAA2B,CAAtC,CAAhB;AACAJ,EAAAA,SAAS,CAACE,aAAD,EAAeC,YAAf,EAA4BE,WAA5B,EAAwCR,SAAxC,CAAT;AACAG,EAAAA,SAAS,CAACE,aAAD,EAAeG,WAAW,GAAC,CAA3B,EAA6BD,WAA7B,EAAyCP,SAAzC,CAAT;AACAW,EAAAA,KAAK,CAACN,aAAD,EAAeC,YAAf,EAA4BE,WAA5B,EAAwCD,WAAxC,EAAoDP,SAApD,CAAL;AACD;;AACD,SAASW,KAAT,CAAeN,aAAf,EAA6BO,UAA7B,EAAwCJ,WAAxC,EAAoDD,WAApD,EAAgEP,SAAhE,EACA;AACE,MAAIa,WAAW,GAAC,EAAhB;AACA,MAAIC,CAAC,GAACF,UAAN;AACA,MAAIG,CAAC,GAACP,WAAW,GAAC,CAAlB;;AACA,SAAMM,CAAC,IAAEN,WAAH,IAAkBO,CAAC,IAAIR,WAA7B,EACA;AACEP,IAAAA,SAAS,CAACgB,IAAV,CAAe,CAAC,aAAD,EAAeF,CAAf,EAAiBC,CAAjB,CAAf;AACAf,IAAAA,SAAS,CAACgB,IAAV,CAAe,CAAC,aAAD,EAAeF,CAAf,EAAiBC,CAAjB,CAAf;;AACA,QAAGV,aAAa,CAACS,CAAD,CAAb,IAAkBT,aAAa,CAACU,CAAD,CAAlC,EACA;AACEF,MAAAA,WAAW,CAACG,IAAZ,CAAiBX,aAAa,CAACS,CAAC,EAAF,CAA9B;AACD,KAHD,MAIK;AACHD,MAAAA,WAAW,CAACG,IAAZ,CAAiBX,aAAa,CAACU,CAAC,EAAF,CAA9B;AACD;AACF;;AACD,SAAOD,CAAC,IAAEN,WAAV,EACA;AACEK,IAAAA,WAAW,CAACG,IAAZ,CAAiBX,aAAa,CAACS,CAAC,EAAF,CAA9B;AACD;;AACD,SAAMC,CAAC,IAAER,WAAT,EACA;AACEM,IAAAA,WAAW,CAACG,IAAZ,CAAiBX,aAAa,CAACU,CAAC,EAAF,CAA9B;AACD;AACF","sourcesContent":["export function getMergeSortAnimation(array)\n{\n  let animation=[];\n  let auxillaryarray=array.slice();\n  mergeSort(auxillaryarray,0,auxillaryarray.length-1,animation);\n  return [animation,array];\n}\nfunction mergeSort (unsortedArray,forwardindex,endingindex,animation) {\n  if(forwardindex==endingindex)\n  {\n    return;\n  }\n  let middleindex=Math.floor((forwardindex+endingindex)/2);\n  mergeSort(unsortedArray,forwardindex,middleindex,animation);\n  mergeSort(unsortedArray,middleindex+1,endingindex,animation);\n  merge(unsortedArray,forwardindex,middleindex,endingindex,animation);\n}\nfunction merge(unsortedArray,startindex,middleindex,endingindex,animation)\n{\n  let SortedArray=[];\n  let i=startindex;\n  let j=middleindex+1;\n  while(i<=middleindex && j <= endingindex)\n  {\n    animation.push([\"comparison1\",i,j]);\n    animation.push([\"comparison2\",i,j]);\n    if(unsortedArray[i]<=unsortedArray[j])\n    {\n      SortedArray.push(unsortedArray[i++]);\n    }\n    else {\n      SortedArray.push(unsortedArray[j++]);\n    }\n  }\n  while (i<=middleindex)\n  {\n    SortedArray.push(unsortedArray[i++]);\n  }\n  while(j<=endingindex)\n  {\n    SortedArray.push(unsortedArray[j++]);\n  }\n}"]},"metadata":{},"sourceType":"module"}