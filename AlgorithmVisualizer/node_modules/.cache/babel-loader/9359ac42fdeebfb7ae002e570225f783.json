{"ast":null,"code":"var _jsxFileName = \"/home/prajjawal-banati/COLLEGE/SEM VII/interactive-algorithm-visualizer/src/SearchingVisualizer/SearchingVisualizer.jsx\";\nimport React from 'react';\nimport './SearchingVisualizer.css'; // Change this value for the speed of the animations.\n\nconst ANIMATION_SPEED_MS = 1; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 310; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'orange'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'black';\nexport default class SearchingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 730));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  LinearSearch() {// const [animations,sortedarray] = getbubblesortanimation(this.state.array);\n    // for(let i=0;i<animations.length;++i)\n    // {\n    //     const iscolorchange = animations[i][0] === \"comparison1\" || animations[i][0] === \"comparison2\";\n    //     // console.log(iscolorchange);\n    //     const arraybars = document.getElementsByClassName('array-bar');\n    //     if(iscolorchange === true)\n    //     {\n    //         const color = (animations[i][0] === \"comparison1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n    //         // console.log(color);\n    //         const [comparison,barOneIndex,barTwoIndex] = animations[i];\n    //         const FirstBarStyle = arraybars[barOneIndex].style;\n    //         const SecondBarStyle = arraybars[barTwoIndex].style;\n    //         setTimeout(() => {\n    //             FirstBarStyle.backgroundColor = color;\n    //             SecondBarStyle.backgroundColor = color;\n    //         },i * ANIMATION_SPEED_MS);\n    //     }\n    //     else {\n    //         const [swap, barIndex, newHeight] = animations[i];\n    //         if (barIndex === -1) {\n    //             continue;\n    //         }\n    //         const barStyle = arraybars[barIndex].style;\n    //         setTimeout(() => {\n    //             barStyle.height = `${newHeight}px`;\n    //         },i * ANIMATION_SPEED_MS); \n    //     }\n    // }\n  }\n\n  BinarySearch() {// const[animations,sortedarray]=getSelectionSortAnimation(this.state.array);\n    // console.log(sortedarray);\n    // for(let i=0;i<animations.length;++i)\n    // {\n    //     const iscolorchange = animations[i][0] === \"comparison1\" || animations[i][0] === \"comparison2\";\n    //     // console.log(iscolorchange);\n    //     const arraybars = document.getElementsByClassName('array-bar');\n    //     if(iscolorchange === true)\n    //     {\n    //         const color = (animations[i][0] === \"comparison1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n    //         // console.log(color);\n    //         const [comparison,barOneIndex,barTwoIndex] = animations[i];\n    //         const FirstBarStyle = arraybars[barOneIndex].style;\n    //         const SecondBarStyle = arraybars[barTwoIndex].style;\n    //         setTimeout(() => {\n    //             FirstBarStyle.backgroundColor = color;\n    //             SecondBarStyle.backgroundColor = color;\n    //         },i * ANIMATION_SPEED_MS);\n    //     }\n    //     else {\n    //         const [swap, barIndex, newHeight] = animations[i];\n    //         if (barIndex === -1) {\n    //             continue;\n    //         }\n    //         const barStyle = arraybars[barIndex].style;\n    //         setTimeout(() => {\n    //             barStyle.height = `${newHeight}px`;\n    //         },i * ANIMATION_SPEED_MS); \n    //     }\n    // }\n  }\n\n  ExponentialSearch() {// const[animations,sortedarray]=getInsertionSortAnimation(this.state.array);\n    // console.log(sortedarray);\n    // for(let i=0;i<animations.length;++i)\n    // {\n    //     const iscolorchange = animations[i][0] === \"comparison1\" || animations[i][0] === \"comparison2\";\n    //     // console.log(iscolorchange);\n    //     const arraybars = document.getElementsByClassName('array-bar');\n    //     if(iscolorchange === true)\n    //     {\n    //         const color = (animations[i][0] === \"comparison1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n    //         // console.log(color);\n    //         const [comparison,barOneIndex,barTwoIndex] = animations[i];\n    //         const FirstBarStyle = arraybars[barOneIndex].style;\n    //         const SecondBarStyle = arraybars[barTwoIndex].style;\n    //         setTimeout(() => {\n    //             FirstBarStyle.backgroundColor = color;\n    //             SecondBarStyle.backgroundColor = color;\n    //         },i * ANIMATION_SPEED_MS);\n    //     }\n    //     else {\n    //         const [swap, barIndex, newHeight] = animations[i];\n    //         if (barIndex === -1) {\n    //             continue;\n    //         }\n    //         const barStyle = arraybars[barIndex].style;\n    //         setTimeout(() => {\n    //             barStyle.height = `${newHeight}px`;\n    //         },i * ANIMATION_SPEED_MS); \n    //     }\n    // }\n  }\n\n  MergeSort() {// console.log(this.state.array);\n    // // const[animations,sortedarray]=getMergeSortAnimation(this.state.array);\n    // // for(let i=0;i<animations.length;i++)\n    // // {\n    // //     console.log(animations[i]);\n    // // }\n    // //console.log(sortedarray);\n    // for(let i=0;i<animations.length;++i)\n    // {\n    //     const iscolorchange = animations[i][0] === \"comparison1\" || animations[i][0] === \"comparison2\";\n    //     // console.log(iscolorchange);\n    //     const arraybars = document.getElementsByClassName('array-bar');\n    //     if(iscolorchange === true)\n    //     {\n    //         const color = (animations[i][0] === \"comparison1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n    //         // console.log(color);\n    //         const [comparison,barOneIndex,barTwoIndex] = animations[i];\n    //         const FirstBarStyle = arraybars[barOneIndex].style;\n    //         const SecondBarStyle = arraybars[barTwoIndex].style;\n    //         setTimeout(() => {\n    //             FirstBarStyle.backgroundColor = color;\n    //             SecondBarStyle.backgroundColor = color;\n    //         },i * ANIMATION_SPEED_MS);\n    //     }\n    //     else {\n    //         const [swap, barIndex, newHeight] = animations[i];\n    //         if (barIndex === -1) {\n    //             continue;\n    //         }\n    //         const barStyle = arraybars[barIndex].style;\n    //         setTimeout(() => {\n    //             barStyle.height = `${newHeight}px`;\n    //         },i * ANIMATION_SPEED_MS); \n    //     }\n    // }\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }\n    }, \"Searching Visualizer\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button\",\n      onClick: () => this.resetArray(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 7\n      }\n    }, \" Generate an Array \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button\",\n      onClick: () => this.LinearSearch(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 7\n      }\n    }, \" Linear Search \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button\",\n      onClick: () => this.BinarySearch(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 7\n      }\n    }, \" Binary Search \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button\",\n      onClick: () => this.ExponentialSearch(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 7\n      }\n    }, \" Exponential Search \")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }\n    }, array.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        backgroundColor: PRIMARY_COLOR\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }\n    }, value))));\n  }\n\n}\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}","map":{"version":3,"sources":["/home/prajjawal-banati/COLLEGE/SEM VII/interactive-algorithm-visualizer/src/SearchingVisualizer/SearchingVisualizer.jsx"],"names":["React","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","SearchingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","LinearSearch","BinarySearch","ExponentialSearch","MergeSort","render","map","value","idx","backgroundColor","min","max","Math","floor","random"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,2BAAP,C,CAEA;;AACA,MAAMC,kBAAkB,GAAG,CAA3B,C,CAEA;;AACA,MAAMC,oBAAoB,GAAG,GAA7B,C,CAEA;;AACA,MAAMC,aAAa,GAAG,QAAtB,C,CAEA;;AACA,MAAMC,eAAe,GAAG,OAAxB;AAEA,eAAe,MAAMC,mBAAN,SAAkCL,KAAK,CAACM,SAAxC,CAAiD;AAC5DC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAOA,KAAP;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE;AADE,KAAb;AAGH;;AACDC,EAAAA,iBAAiB,GAAE;AACf,SAAKC,UAAL;AACH;;AACDA,EAAAA,UAAU,GAAE;AACR,UAAMF,KAAK,GAAG,EAAd;;AACA,SAAI,IAAIG,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACX,oBAAd,EAAmCW,CAAC,EAApC,EACA;AACIH,MAAAA,KAAK,CAACI,IAAN,CAAWC,qBAAqB,CAAC,CAAD,EAAG,GAAH,CAAhC;AACH;;AACD,SAAKC,QAAL,CAAc;AAACN,MAAAA;AAAD,KAAd;AACH;;AACDO,EAAAA,YAAY,GACZ,CACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AACDC,EAAAA,YAAY,GACZ,CACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AACDC,EAAAA,iBAAiB,GACjB,CACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAEDC,EAAAA,SAAS,GACT,CACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AACDC,EAAAA,MAAM,GAAE;AACJ,UAAM;AAACX,MAAAA;AAAD,QAAU,KAAKD,KAArB;AACA,wBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACR;AAAK,MAAA,SAAS,EAAG,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAK,MAAA,SAAS,EAAG,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADA,CADA,eAIF;AAAK,MAAA,SAAS,EAAG,QAAjB;AAA0B,MAAA,OAAO,EAAE,MAAM,KAAKG,UAAL,EAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAJE,eAKF;AAAK,MAAA,SAAS,EAAG,QAAjB;AAA0B,MAAA,OAAO,EAAE,MAAM,KAAKK,YAAL,EAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBALE,eAMF;AAAK,MAAA,SAAS,EAAG,QAAjB;AAA0B,MAAA,OAAO,EAAE,MAAM,KAAKC,YAAL,EAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBANE,eAOF;AAAK,MAAA,SAAS,EAAG,QAAjB;AAA0B,MAAA,OAAO,EAAE,MAAM,KAAKC,iBAAL,EAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAPE,CADQ,eAUR;AAAK,MAAA,SAAS,EAAE,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKT,KAAK,CAACY,GAAN,CAAU,CAACC,KAAD,EAAOC,GAAP,kBACP;AACA,MAAA,SAAS,EAAG,WADZ;AAEA,MAAA,GAAG,EAAIA,GAFP;AAGA,MAAA,KAAK,EAAI;AACLC,QAAAA,eAAe,EAACtB;AADX,OAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMKoB,KANL,CADH,CADL,CAVQ,CAAR;AAwBH;;AArL2D;;AAuLhE,SAASR,qBAAT,CAA+BW,GAA/B,EAAoCC,GAApC,EAAyC;AACrC;AACA,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACD","sourcesContent":["import React from 'react';\nimport './SearchingVisualizer.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 1;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 310;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'orange';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'black';\n\nexport default class SearchingVisualizer extends React.Component{\n    constructor(props){\n        super (props);\n        this.state = {\n            array: [],\n        };\n    }\n    componentDidMount(){\n        this.resetArray();\n    }\n    resetArray(){\n        const array = [];\n        for(let i=0;i<NUMBER_OF_ARRAY_BARS;i++)\n        {\n            array.push(randomIntFromInterval(5,730));\n        }\n        this.setState({array});\n    }\n    LinearSearch()\n    {\n        // const [animations,sortedarray] = getbubblesortanimation(this.state.array);\n        // for(let i=0;i<animations.length;++i)\n        // {\n        //     const iscolorchange = animations[i][0] === \"comparison1\" || animations[i][0] === \"comparison2\";\n        //     // console.log(iscolorchange);\n        //     const arraybars = document.getElementsByClassName('array-bar');\n        //     if(iscolorchange === true)\n        //     {\n        //         const color = (animations[i][0] === \"comparison1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n        //         // console.log(color);\n        //         const [comparison,barOneIndex,barTwoIndex] = animations[i];\n        //         const FirstBarStyle = arraybars[barOneIndex].style;\n        //         const SecondBarStyle = arraybars[barTwoIndex].style;\n        //         setTimeout(() => {\n        //             FirstBarStyle.backgroundColor = color;\n        //             SecondBarStyle.backgroundColor = color;\n        //         },i * ANIMATION_SPEED_MS);\n        //     }\n        //     else {\n        //         const [swap, barIndex, newHeight] = animations[i];\n        //         if (barIndex === -1) {\n        //             continue;\n        //         }\n        //         const barStyle = arraybars[barIndex].style;\n        //         setTimeout(() => {\n        //             barStyle.height = `${newHeight}px`;\n        //         },i * ANIMATION_SPEED_MS); \n        //     }\n        // }\n    }\n    BinarySearch()\n    {\n        // const[animations,sortedarray]=getSelectionSortAnimation(this.state.array);\n        // console.log(sortedarray);\n        // for(let i=0;i<animations.length;++i)\n        // {\n        //     const iscolorchange = animations[i][0] === \"comparison1\" || animations[i][0] === \"comparison2\";\n        //     // console.log(iscolorchange);\n        //     const arraybars = document.getElementsByClassName('array-bar');\n        //     if(iscolorchange === true)\n        //     {\n        //         const color = (animations[i][0] === \"comparison1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n        //         // console.log(color);\n        //         const [comparison,barOneIndex,barTwoIndex] = animations[i];\n        //         const FirstBarStyle = arraybars[barOneIndex].style;\n        //         const SecondBarStyle = arraybars[barTwoIndex].style;\n        //         setTimeout(() => {\n        //             FirstBarStyle.backgroundColor = color;\n        //             SecondBarStyle.backgroundColor = color;\n        //         },i * ANIMATION_SPEED_MS);\n        //     }\n        //     else {\n        //         const [swap, barIndex, newHeight] = animations[i];\n        //         if (barIndex === -1) {\n        //             continue;\n        //         }\n        //         const barStyle = arraybars[barIndex].style;\n        //         setTimeout(() => {\n        //             barStyle.height = `${newHeight}px`;\n        //         },i * ANIMATION_SPEED_MS); \n        //     }\n        // }\n    }\n    ExponentialSearch()\n    {\n        // const[animations,sortedarray]=getInsertionSortAnimation(this.state.array);\n        // console.log(sortedarray);\n        // for(let i=0;i<animations.length;++i)\n        // {\n        //     const iscolorchange = animations[i][0] === \"comparison1\" || animations[i][0] === \"comparison2\";\n        //     // console.log(iscolorchange);\n        //     const arraybars = document.getElementsByClassName('array-bar');\n        //     if(iscolorchange === true)\n        //     {\n        //         const color = (animations[i][0] === \"comparison1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n        //         // console.log(color);\n        //         const [comparison,barOneIndex,barTwoIndex] = animations[i];\n        //         const FirstBarStyle = arraybars[barOneIndex].style;\n        //         const SecondBarStyle = arraybars[barTwoIndex].style;\n        //         setTimeout(() => {\n        //             FirstBarStyle.backgroundColor = color;\n        //             SecondBarStyle.backgroundColor = color;\n        //         },i * ANIMATION_SPEED_MS);\n        //     }\n        //     else {\n        //         const [swap, barIndex, newHeight] = animations[i];\n        //         if (barIndex === -1) {\n        //             continue;\n        //         }\n        //         const barStyle = arraybars[barIndex].style;\n        //         setTimeout(() => {\n        //             barStyle.height = `${newHeight}px`;\n        //         },i * ANIMATION_SPEED_MS); \n        //     }\n        // }\n    }\n    \n    MergeSort()\n    {\n        // console.log(this.state.array);\n        // // const[animations,sortedarray]=getMergeSortAnimation(this.state.array);\n        // // for(let i=0;i<animations.length;i++)\n        // // {\n        // //     console.log(animations[i]);\n        // // }\n        // //console.log(sortedarray);\n        // for(let i=0;i<animations.length;++i)\n        // {\n        //     const iscolorchange = animations[i][0] === \"comparison1\" || animations[i][0] === \"comparison2\";\n        //     // console.log(iscolorchange);\n        //     const arraybars = document.getElementsByClassName('array-bar');\n        //     if(iscolorchange === true)\n        //     {\n        //         const color = (animations[i][0] === \"comparison1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n        //         // console.log(color);\n        //         const [comparison,barOneIndex,barTwoIndex] = animations[i];\n        //         const FirstBarStyle = arraybars[barOneIndex].style;\n        //         const SecondBarStyle = arraybars[barTwoIndex].style;\n        //         setTimeout(() => {\n        //             FirstBarStyle.backgroundColor = color;\n        //             SecondBarStyle.backgroundColor = color;\n        //         },i * ANIMATION_SPEED_MS);\n        //     }\n        //     else {\n        //         const [swap, barIndex, newHeight] = animations[i];\n        //         if (barIndex === -1) {\n        //             continue;\n        //         }\n        //         const barStyle = arraybars[barIndex].style;\n        //         setTimeout(() => {\n        //             barStyle.height = `${newHeight}px`;\n        //         },i * ANIMATION_SPEED_MS); \n        //     }\n        // }\n    }\n    render(){\n        const {array} = this.state;\n        return (<div>\n        <div className = \"header\">\n        <div className = \"heading\">\n        <h2>Searching Visualizer</h2>\n        </div>\n      <div className = \"button\" onClick={() => this.resetArray()}> Generate an Array </div>\n      <div className = \"button\" onClick={() => this.LinearSearch()}> Linear Search </div>\n      <div className = \"button\" onClick={() => this.BinarySearch()}> Binary Search </div>\n      <div className = \"button\" onClick={() => this.ExponentialSearch()}> Exponential Search </div>\n      </div>\n        <div className =\"array-container\">\n            {array.map((value,idx) => (\n                <div\n                className = \"array-bar\"\n                key = {idx}\n                style = {{\n                    backgroundColor:PRIMARY_COLOR,\n                }}>\n                    {value}\n                </div>\n            ))\n            }\n        </div>\n        </div>);\n    }\n}\nfunction randomIntFromInterval(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }"]},"metadata":{},"sourceType":"module"}