{"ast":null,"code":"export function getMergeSortAnimation(array) {\n  let animation = [];\n  let auxillaryarray = array.slice(); // MergeSort(auxillaryarray,0,auxillaryarray.length-1,animation);\n\n  auxillaryarray = mergeSort(auxillaryarray);\n  array = auxillaryarray;\n  console.log(auxillaryarray);\n  return [animation, array];\n}\n\nfunction mergeSort(unsortedArray) {\n  // No need to sort the array if the array only has one element or empty\n  if (unsortedArray.length <= 1) {\n    return unsortedArray;\n  } // In order to divide the array in half, we need to figure out the middle\n\n\n  const middle = Math.floor(unsortedArray.length / 2); // This is where we will be dividing the array into left and right\n\n  const left = unsortedArray.slice(0, middle);\n  const right = unsortedArray.slice(middle); // Using recursion to combine the left and right\n\n  return merge(mergeSort(left), mergeSort(right));\n}\n\nfunction merge(left, right) {\n  let resultArray = [],\n      leftIndex = 0,\n      rightIndex = 0; // We will concatenate values into the resultArray in order\n\n  while (leftIndex < left.length && rightIndex < right.length) {\n    if (left[leftIndex] < right[rightIndex]) {\n      resultArray.push(left[leftIndex]);\n      leftIndex++; // move left array cursor\n    } else {\n      resultArray.push(right[rightIndex]);\n      rightIndex++; // move right array cursor\n    }\n  } // We need to concat here because there will be one element remaining\n  // from either left OR the right\n\n\n  return resultArray.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));\n}","map":{"version":3,"sources":["/home/prajjawal-banati/COLLEGE/SEM VII/interactive-algorithm-visualizer/src/sortingAlgorithms/MergeSort.js"],"names":["getMergeSortAnimation","array","animation","auxillaryarray","slice","mergeSort","console","log","unsortedArray","length","middle","Math","floor","left","right","merge","resultArray","leftIndex","rightIndex","push","concat"],"mappings":"AAAA,OAAO,SAASA,qBAAT,CAA+BC,KAA/B,EACP;AACI,MAAIC,SAAS,GAAC,EAAd;AACA,MAAIC,cAAc,GAACF,KAAK,CAACG,KAAN,EAAnB,CAFJ,CAGI;;AACAD,EAAAA,cAAc,GAACE,SAAS,CAACF,cAAD,CAAxB;AACAF,EAAAA,KAAK,GAACE,cAAN;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYJ,cAAZ;AACA,SAAO,CAACD,SAAD,EAAWD,KAAX,CAAP;AACH;;AACD,SAASI,SAAT,CAAoBG,aAApB,EAAmC;AAC/B;AACA,MAAIA,aAAa,CAACC,MAAd,IAAwB,CAA5B,EAA+B;AAC7B,WAAOD,aAAP;AACD,GAJ8B,CAK/B;;;AACA,QAAME,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWJ,aAAa,CAACC,MAAd,GAAuB,CAAlC,CAAf,CAN+B,CAQ/B;;AACA,QAAMI,IAAI,GAAGL,aAAa,CAACJ,KAAd,CAAoB,CAApB,EAAuBM,MAAvB,CAAb;AACA,QAAMI,KAAK,GAAGN,aAAa,CAACJ,KAAd,CAAoBM,MAApB,CAAd,CAV+B,CAY/B;;AACA,SAAOK,KAAK,CACVV,SAAS,CAACQ,IAAD,CADC,EACOR,SAAS,CAACS,KAAD,CADhB,CAAZ;AAGD;;AACD,SAASC,KAAT,CAAgBF,IAAhB,EAAsBC,KAAtB,EAA6B;AAC3B,MAAIE,WAAW,GAAG,EAAlB;AAAA,MAAsBC,SAAS,GAAG,CAAlC;AAAA,MAAqCC,UAAU,GAAG,CAAlD,CAD2B,CAG3B;;AACA,SAAOD,SAAS,GAAGJ,IAAI,CAACJ,MAAjB,IAA2BS,UAAU,GAAGJ,KAAK,CAACL,MAArD,EAA6D;AAC3D,QAAII,IAAI,CAACI,SAAD,CAAJ,GAAkBH,KAAK,CAACI,UAAD,CAA3B,EAAyC;AACvCF,MAAAA,WAAW,CAACG,IAAZ,CAAiBN,IAAI,CAACI,SAAD,CAArB;AACAA,MAAAA,SAAS,GAF8B,CAE1B;AACd,KAHD,MAGO;AACLD,MAAAA,WAAW,CAACG,IAAZ,CAAiBL,KAAK,CAACI,UAAD,CAAtB;AACAA,MAAAA,UAAU,GAFL,CAES;AACf;AACF,GAZ0B,CAc3B;AACA;;;AACA,SAAOF,WAAW,CACTI,MADF,CACSP,IAAI,CAACT,KAAL,CAAWa,SAAX,CADT,EAEEG,MAFF,CAESN,KAAK,CAACV,KAAN,CAAYc,UAAZ,CAFT,CAAP;AAGD","sourcesContent":["export function getMergeSortAnimation(array)\n{\n    let animation=[];\n    let auxillaryarray=array.slice();\n    // MergeSort(auxillaryarray,0,auxillaryarray.length-1,animation);\n    auxillaryarray=mergeSort(auxillaryarray);\n    array=auxillaryarray;\n    console.log(auxillaryarray);\n    return [animation,array];\n}\nfunction mergeSort (unsortedArray) {\n    // No need to sort the array if the array only has one element or empty\n    if (unsortedArray.length <= 1) {\n      return unsortedArray;\n    }\n    // In order to divide the array in half, we need to figure out the middle\n    const middle = Math.floor(unsortedArray.length / 2);\n  \n    // This is where we will be dividing the array into left and right\n    const left = unsortedArray.slice(0, middle);\n    const right = unsortedArray.slice(middle);\n  \n    // Using recursion to combine the left and right\n    return merge(\n      mergeSort(left), mergeSort(right)\n    );\n  }\n  function merge (left, right) {\n    let resultArray = [], leftIndex = 0, rightIndex = 0;\n  \n    // We will concatenate values into the resultArray in order\n    while (leftIndex < left.length && rightIndex < right.length) {\n      if (left[leftIndex] < right[rightIndex]) {\n        resultArray.push(left[leftIndex]);\n        leftIndex++; // move left array cursor\n      } else {\n        resultArray.push(right[rightIndex]);\n        rightIndex++; // move right array cursor\n      }\n    }\n  \n    // We need to concat here because there will be one element remaining\n    // from either left OR the right\n    return resultArray\n            .concat(left.slice(leftIndex))\n            .concat(right.slice(rightIndex));\n  }"]},"metadata":{},"sourceType":"module"}