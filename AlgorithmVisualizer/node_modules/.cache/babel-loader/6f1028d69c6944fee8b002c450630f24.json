{"ast":null,"code":"var _jsxFileName = \"/home/prajjawal-banati/COLLEGE/SEM VII/interactive-algorithm-visualizer/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from 'react';\nimport { getbubblesortanimation } from '../sortingAlgorithms/BubbleSort';\nimport { getSelectionSortAnimation } from '../sortingAlgorithms/SelectionSort';\nimport './SortingVisualizer.css'; // Change this value for the speed of the animations.\n\nconst ANIMATION_SPEED_MS = 1; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 310; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'turquoise'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'red';\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 730));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  BubbleSort() {\n    const [animations, sortedarray] = getbubblesortanimation(this.state.array);\n    console.log(sortedarray);\n\n    for (let i = 0; i < animations.length; ++i) {\n      console.log(animations[i]);\n    }\n\n    for (let i = 0; i < animations.length; ++i) {\n      const iscolorchange = animations[i][0] === \"comparison1\" || animations[i][0] === \"comparison2\";\n      console.log(iscolorchange);\n      const arraybars = document.getElementsByClassName('array-bar');\n\n      if (iscolorchange === true) {\n        const color = animations[i][0] === \"comparison1\" ? SECONDARY_COLOR : PRIMARY_COLOR; // console.log(color);\n\n        const [comparison, barOneIndex, barTwoIndex] = animations[i];\n        const FirstBarStyle = arraybars[barOneIndex].style;\n        const SecondBarStyle = arraybars[barTwoIndex].style;\n        setTimeout(() => {\n          FirstBarStyle.backgroundColor = color;\n          SecondBarStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const [swap, barIndex, newHeight] = animations[i];\n\n        if (barIndex === -1) {\n          continue;\n        }\n\n        const barStyle = arraybars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }, \"Sorting Visualizer\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button\",\n      onClick: () => this.resetArray(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }\n    }, \" Generate an Array \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }\n    }, \" Merge Sort \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button\",\n      onClick: () => this.BubbleSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }\n    }, \" Bubble Sort \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }\n    }, \" Heap Sort \")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }, array.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        backgroundColor: PRIMARY_COLOR,\n        height: `${value}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }\n    }))));\n  }\n\n}\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}","map":{"version":3,"sources":["/home/prajjawal-banati/COLLEGE/SEM VII/interactive-algorithm-visualizer/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getbubblesortanimation","getSelectionSortAnimation","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","BubbleSort","animations","sortedarray","console","log","length","iscolorchange","arraybars","document","getElementsByClassName","color","comparison","barOneIndex","barTwoIndex","FirstBarStyle","style","SecondBarStyle","setTimeout","backgroundColor","swap","barIndex","newHeight","barStyle","height","render","map","value","idx","min","max","Math","floor","random"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {getbubblesortanimation} from '../sortingAlgorithms/BubbleSort';\nimport {getSelectionSortAnimation} from '../sortingAlgorithms/SelectionSort';\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 1;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 310;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends React.Component{\n    constructor(props){\n        super (props);\n        this.state = {\n            array: [],\n        };\n    }\n    componentDidMount(){\n        this.resetArray();\n    }\n    resetArray(){\n        const array = [];\n        for(let i=0;i<NUMBER_OF_ARRAY_BARS;i++)\n        {\n            array.push(randomIntFromInterval(5,730));\n        }\n        this.setState({array});\n    }\n    BubbleSort()\n    {\n        const [animations,sortedarray] = getbubblesortanimation(this.state.array);\n        console.log(sortedarray);\n        for(let i=0;i<animations.length;++i)\n        {\n            console.log(animations[i]);\n        }\n        for(let i=0;i<animations.length;++i)\n        {\n            const iscolorchange = animations[i][0] === \"comparison1\" || animations[i][0] === \"comparison2\";\n            console.log(iscolorchange);\n            const arraybars = document.getElementsByClassName('array-bar');\n            if(iscolorchange === true)\n            {\n                const color = (animations[i][0] === \"comparison1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                // console.log(color);\n                const [comparison,barOneIndex,barTwoIndex] = animations[i];\n                const FirstBarStyle = arraybars[barOneIndex].style;\n                const SecondBarStyle = arraybars[barTwoIndex].style;\n                setTimeout(() => {\n                    FirstBarStyle.backgroundColor = color;\n                    SecondBarStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [swap, barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arraybars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS); \n            }\n        }\n    }\n    render(){\n        const {array} = this.state;\n        return (<div>\n        <div className = \"App-header\">\n        <div className = \"heading\">\n        <h2>Sorting Visualizer</h2>\n        </div>\n      <div className = \"button\" onClick={() => this.resetArray()}> Generate an Array </div>\n      <div className = \"button\"> Merge Sort </div>\n      <div className = \"button\" onClick={() => this.BubbleSort()}> Bubble Sort </div>\n      <div className = \"button\"> Heap Sort </div>\n      </div>\n        <div className =\"array-container\">\n            {array.map((value,idx) => (\n                <div\n                className = \"array-bar\"\n                key = {idx}\n                style = {{\n                    backgroundColor:PRIMARY_COLOR,\n                    height: `${value}px`,\n                }}></div>\n            ))\n            }\n        </div>\n        </div>);\n    }\n}\nfunction randomIntFromInterval(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }"]},"metadata":{},"sourceType":"module"}