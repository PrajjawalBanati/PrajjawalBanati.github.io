{"ast":null,"code":"var _jsxFileName = \"/home/prajjawal-banati/COLLEGE/SEM VII/interactive-algorithm-visualizer/src/SearchingVisualizer/SearchingVisualizer.jsx\";\nimport React from 'react';\nimport './styles.css';\nimport { getLinearSearchAnimations } from '../searchingAlgorithms/LinearSearch'; // Change this value for the speed of the animations.\n\nconst ANIMATION_SPEED_MS = 1; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 310; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'orange'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'white';\nconst FOUND_COLOR = 'green';\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n      value: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 730));\n    }\n\n    array.sort((a, b) => a - b);\n    this.setState({\n      array\n    });\n  }\n\n  LinearSearch() {\n    let element = parseInt(this.state.value);\n    const animations = getLinearSearchAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const iscolorchange = animations[i][0] === \"iteration1\" || animations[i][0] === \"iteration2\";\n      const arrayboxes = document.getElementsByClassName('array-bar-2');\n\n      if (iscolorchange === true) {\n        const color = animations[i][0] === \"iteration1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const barindex = animations[i][1];\n        const FirstBarStyle = arrayboxes[barindex].style;\n        setTimeout(() => {\n          FirstBarStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (animations[i][0] === \"found\") {\n        const barFoundIndex = animations[i][1];\n        const barstyle = arrayboxes[barFoundIndex].style;\n        barstyle.backgroundColor = FOUND_COLOR;\n      } else {\n        alert(\"Element Not Found\");\n      }\n    }\n  }\n\n  BinarySearch() {\n    let element = parseInt(this.state.value);\n  }\n\n  JumpSearch() {\n    let element = parseInt(this.state.value);\n  }\n\n  ExponentialSearch() {\n    let element = parseInt(this.state.value);\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App-header-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }\n    }, \"Searching Visualizer\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      className: \"element-input\",\n      value: this.state.value,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 36\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button\",\n      onClick: () => this.resetArray(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }, \" Generate an Array \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button\",\n      onClick: () => this.LinearSearch(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }, \" Linear Search \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button\",\n      onClick: () => this.BubbleSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }, \" Binary Search \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button\",\n      onClick: () => this.InsertionSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }, \" Exponential Search \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button\",\n      onClick: () => this.MergeSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, \" Jump Search \")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }, array.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar-2\",\n      key: idx,\n      style: {\n        backgroundColor: PRIMARY_COLOR\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }, value))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"footer-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}","map":{"version":3,"sources":["/home/prajjawal-banati/COLLEGE/SEM VII/interactive-algorithm-visualizer/src/SearchingVisualizer/SearchingVisualizer.jsx"],"names":["React","getLinearSearchAnimations","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","FOUND_COLOR","SortingVisualizer","Component","constructor","props","state","array","value","handleChange","bind","componentDidMount","resetArray","event","setState","target","i","push","randomIntFromInterval","sort","a","b","LinearSearch","element","parseInt","animations","length","iscolorchange","arrayboxes","document","getElementsByClassName","color","barindex","FirstBarStyle","style","setTimeout","backgroundColor","barFoundIndex","barstyle","alert","BinarySearch","JumpSearch","ExponentialSearch","render","BubbleSort","InsertionSort","MergeSort","map","idx","min","max","Math","floor","random"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './styles.css';\nimport { getLinearSearchAnimations } from '../searchingAlgorithms/LinearSearch';\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 1;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 310;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'orange';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'white';\n\nconst FOUND_COLOR = 'green'\n\nexport default class SortingVisualizer extends React.Component{\n    constructor(props){\n        super (props);\n        this.state = {\n            array: [],\n            value: ''\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n    componentDidMount(){\n        this.resetArray();\n    }\n    handleChange(event)\n    {\n        this.setState({value: event.target.value});\n    }\n    resetArray(){\n        const array = [];\n        for(let i=0;i<NUMBER_OF_ARRAY_BARS;i++)\n        {\n            array.push(randomIntFromInterval(5,730));\n        }\n        array.sort((a,b)=>a - b);\n        this.setState({array});\n    }\n    LinearSearch()\n    {\n        let element=parseInt(this.state.value);\n        const animations=getLinearSearchAnimations(this.state.array);\n        for(let i=0;i<animations.length;i++)\n        {\n            const iscolorchange = animations[i][0] === \"iteration1\" || animations[i][0] === \"iteration2\";\n            const arrayboxes = document.getElementsByClassName('array-bar-2');\n            if(iscolorchange===true)\n            {\n                const color = (animations[i][0] === \"iteration1\") ? SECONDARY_COLOR:PRIMARY_COLOR;\n                const barindex=animations[i][1];\n                const FirstBarStyle=arrayboxes[barindex].style;\n                setTimeout(()=>{\n                    FirstBarStyle.backgroundColor=color;\n                },i*ANIMATION_SPEED_MS);\n            }\n            else if(animations[i][0]===\"found\") {\n                const barFoundIndex=animations[i][1];\n                const barstyle=arrayboxes[barFoundIndex].style;\n                barstyle.backgroundColor=FOUND_COLOR;\n            }\n            else {\n                alert(\"Element Not Found\");\n            }\n\n        }\n\n    }\n    BinarySearch()\n    {\n        let element=parseInt(this.state.value);        \n    }\n    JumpSearch()\n    {\n        let element=parseInt(this.state.value);\n        \n    }\n    ExponentialSearch()\n    {\n        let element = parseInt(this.state.value);\n        \n    }\n\n    render(){\n        const {array} = this.state;\n        return (<div>\n        <div className = \"App-header-2\">\n        <div className = \"heading\">\n        <h2>Searching Visualizer</h2>\n        </div>\n        <div className = \"button\"> <input type=\"text\" className=\"element-input\" value={this.state.value} onChange={this.handleChange}></input></div>\n        <div className = \"button\" onClick={() => this.resetArray()}> Generate an Array </div>\n        <div className = \"button\" onClick={() => this.LinearSearch()}> Linear Search </div>\n        <div className = \"button\" onClick={() => this.BubbleSort()}> Binary Search </div>\n        <div className = \"button\" onClick={() => this.InsertionSort()}> Exponential Search </div>\n        <div className = \"button\" onClick={() => this.MergeSort()}> Jump Search </div>\n        </div>\n        <div className =\"array-container-2\">\n            {array.map((value,idx) => (\n                <div\n                className = \"array-bar-2\"\n                key = {idx}\n                style = {{\n                    backgroundColor:PRIMARY_COLOR,\n                }}>\n                    {value}\n                </div>\n            ))\n            }\n        </div>\n        <div className=\"footer-2\">\n      </div>\n        </div>);\n    }\n}\nfunction randomIntFromInterval(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }"]},"metadata":{},"sourceType":"module"}